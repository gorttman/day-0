# FILE: roles/prep-kernel/tasks/prepare_kernel_initrd.yml
---
# Prepare kernel, initramfs, and iPXE boot script for HTTP/NFS netboot
# using only Ansible built-in modules.

# --------------------------------------------------------------------
# Ensure required staging directory exists
# --------------------------------------------------------------------
- name: Ensure staging boot directory exists
  ansible.builtin.file:
    path: "{{ staging_boot }}"
    state: directory
    mode: "0755"

# --------------------------------------------------------------------
# Locate and copy latest kernel image
# --------------------------------------------------------------------
- name: Find all kernel images under /boot
  become: true
  ansible.builtin.find:
    paths: /boot
    patterns: "vmlinuz-*"
    file_type: file
  register: kernel_candidates

- name: Fail if no kernel images found
  ansible.builtin.fail:
    msg: "No kernel images found under /boot."
  when: kernel_candidates.matched | int == 0

- name: Select latest kernel image
  ansible.builtin.set_fact:
    latest_kernel_path: "{{ (kernel_candidates.files | sort(attribute='mtime') | last).path }}"

- name: Copy latest kernel image to staging directory
  become: true
  ansible.builtin.copy:
    src: "{{ latest_kernel_path }}"
    dest: "{{ staging_boot }}/{{ kernel_filename }}"
    remote_src: true
    mode: "0644"

# --------------------------------------------------------------------
# Locate and copy latest initrd image
# --------------------------------------------------------------------
- name: Find all initrd images under /boot
  become: true
  ansible.builtin.find:
    paths: /boot
    patterns: "initrd.img-*"
    file_type: file
  register: initrd_candidates

- name: Fail if no initrd images found
  ansible.builtin.fail:
    msg: "No initrd images found under /boot."
  when: initrd_candidates.matched | int == 0

- name: Select latest initrd image
  ansible.builtin.set_fact:
    latest_initrd_path: "{{ (initrd_candidates.files | sort(attribute='mtime') | last).path }}"

- name: Copy latest initrd image to staging directory
  become: true
  ansible.builtin.copy:
    src: "{{ latest_initrd_path }}"
    dest: "{{ staging_boot }}/{{ initrd_filename }}"
    remote_src: true
    mode: "0644"

# --------------------------------------------------------------------
# Generate iPXE script
# --------------------------------------------------------------------
- name: Generate iPXE boot script
  ansible.builtin.copy:
    dest: "{{ staging_boot }}/{{ ipxe_filename }}"
    mode: "0644"
    content: |
      #!ipxe
      echo Booting Raspberry Pi 5 via HTTP/NFS
      kernel http://{{ NETBOOT_HTTP_IP }}:{{ NETBOOT_HTTP_PORT }}/netboot/rpi5/{{ kernel_filename }} \
        root=/dev/nfs nfsroot={{ NFS_SERVER_IP }}:{{ NFS_EXPORT_PATH }}/base rw ip=dhcp console=ttyAMA0,115200 console=tty1
      initrd http://{{ NETBOOT_HTTP_IP }}:{{ NETBOOT_HTTP_PORT }}/netboot/rpi5/{{ initrd_filename }}
      boot

# --------------------------------------------------------------------
# Publish boot artifacts to HTTP path
# --------------------------------------------------------------------
- name: Ensure HTTP publish directory exists
  ansible.builtin.file:
    path: "{{ boot_publish_path }}"
    state: directory
    mode: "0755"

- name: Synchronize staged boot files to HTTP publish path
  become: true
  delegate_to: "{{ inventory_hostname }}"
  ansible.builtin.synchronize:
    src: "{{ staging_boot }}/"
    dest: "{{ boot_publish_path }}/"
    delete: true
    recursive: true
    mode: push
